import java.util.Comparator;import java.util.PriorityQueue;import java.util.Queue;public class TrapRainWater2 {	 private class Bar{	        int x;	        int y;	        int height;	        Bar(int x, int y, int height){	            this.x = x;	            this.y = y;	            this.height = height;	        }	    }	    	    private class BarComparator implements Comparator<Bar>{	        public int compare(Bar x, Bar y){	            return x.height - y.height;	        }	    }	    /**	     * @param heights: a matrix of integers	     * @return: an integer	     */	    public int trapRainWater(int[][] heights) {	        int row = heights.length, col = heights[0].length;	        int count = 0;	        boolean[][] visited = new boolean[row][col];	        Queue<Bar> pq = new PriorityQueue<Bar>(1, new BarComparator());	        for(int i = 0; i < row; i++){	            if(!visited[i][0]) pq.offer(new Bar(i, 0, heights[i][0]));	            if(!visited[i][0]) pq.offer(new Bar(i, col-1, heights[i][col-1]));	            visited[i][0] = true;	            visited[i][col-1] = true;	        }	        for(int i = 0; i < col; i++){	            if(!visited[0][i]) pq.offer(new Bar(0, i, heights[0][i]));	            if(!visited[row-1][i]) pq.offer(new Bar(row-1, i, heights[row-1][i]));	            visited[0][i] = true;	            visited[row-1][i] = true;	        }	        int[] dx = {0,-1,-0,1};	        int[] dy = {-1,0,1,0};	        while(!pq.isEmpty()){	            Bar bar = pq.poll();	            int x = bar.x, y = bar.y, h = bar.height;	            for(int i = 0; i < 4; i++){	                int nx = x + dx[i];	                int ny = y + dy[i];	                if(nx >= 0 && nx < row && ny >= 0 && ny < col && !visited[nx][ny]) {	                    visited[nx][ny] = true;	                    pq.offer(new Bar(nx,ny,Math.max(h,heights[nx][ny])));	                    count += Math.max(0,h - heights[nx][ny]);	                }	            }	        }	        return count;	    }}