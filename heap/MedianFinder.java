import java.util.Comparator;import java.util.PriorityQueue;import java.util.Queue;public class MedianFinder {	Queue<Integer> pq1;    Queue<Integer> pq2;        private class IntComparator implements Comparator<Integer>{        public int compare(Integer a, Integer b){            return b-a;        }    }        MedianFinder(){        pq1 = new PriorityQueue<Integer>(1, new IntComparator());        pq2 = new PriorityQueue<Integer>();    }    // Adds a number into the data structure.    // O(logn)    public void addNum(int num) {        if(pq1.size() == 0) pq1.offer(num);        else{            int med = pq1.peek();            if(num <= med) pq1.offer(num);            else pq2.offer(num);        }        // adjust        if(pq1.size() - pq2.size() >= 2){            int tmp = pq1.poll();            pq2.offer(tmp);        }         if(pq2.size() > pq1.size()){            int tmp = pq2.poll();            pq1.offer(tmp);        }    }    // Returns the median of current data stream    // O(1)    public double findMedian() {        if(pq1.size() == pq2.size()) return (pq1.peek() + pq2.peek()) / 2.0;        else return pq1.peek();    }}