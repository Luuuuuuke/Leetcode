import java.util.ArrayList;import java.util.Comparator;import java.util.PriorityQueue;import java.util.Queue;public class SlidingWindowMedian {	/**     * @param nums: A list of integers.     * @return: The median of the element inside the window at each moving.     */    public class IntComparator implements Comparator<Integer>{        public int compare(Integer a, Integer b){            return b - a;        }    }    // use 2 pq, O(nk)    public ArrayList<Integer> medianSlidingWindow(int[] nums, int k) {        if(nums == null || nums.length == 0 || k > nums.length) return new ArrayList<Integer>();        Queue<Integer> pq1 = new PriorityQueue<Integer>(1, new IntComparator());        Queue<Integer> pq2 = new PriorityQueue<Integer>();        ArrayList<Integer> res = new ArrayList<Integer>();        // initialize 2 pq and medium        int[] tmp = new int[k];        for(int i = 0; i < k; i++){            tmp[i] = nums[i];        }        Arrays.sort(tmp);        int med = tmp[(k-1)/2];        for(int i = 0; i < k; i++){            if(i <= (k-1)/2) pq1.add(tmp[i]);            if(i > (k-1)/2) pq2.add(tmp[i]);        }        res.add(med);        // O(n)        for(int i = k, j = 0; i < nums.length; i++,j++){            //O(k)            if(nums[j] <= med) pq1.remove(nums[j]);            else pq2.remove(nums[j]);            if(nums[i] <= med) pq1.offer(nums[i]);            else pq2.offer(nums[i]);            if(pq1.size() - pq2.size() >= 2){                int num = pq1.poll();                pq2.offer(num);            }             if(pq2.size() > pq1.size()){                int num = pq2.poll();                pq1.offer(num);            }             med = pq1.peek();            res.add(med);        }        return res;    }}