import java.util.Comparator;import java.util.PriorityQueue;import java.util.Queue;public class KthSmallestInMatrix {	    /**	     * @param matrix: a matrix of integers	     * @param k: an integer	     * @return: the kth smallest number in the matrix	     */	    	    // define the element class	    class MatrixElement{	        public int row;	        public int col;	        public int val;	        public MatrixElement(int row, int col, int val){	            this.row = row;	            this.col = col;	            this.val = val;	        }	    }	    	    // define comparator for element	    class ElementComparator implements Comparator<MatrixElement>{	        	        public int compare(MatrixElement e1, MatrixElement e2){	            return e1.val - e2.val;	        }	    }	    public int kthSmallest(int[][] matrix, int k) {	        // Make candidate pool using min-heap	        Queue<MatrixElement> pq = new PriorityQueue<MatrixElement>(k, new ElementComparator());	        int row = matrix.length, col = matrix[0].length;	        boolean[][] used = new boolean[row][col];	        MatrixElement min= new MatrixElement(0,0,matrix[0][0]);	        pq.add(min);	        used[0][0]= true;	        while(k>0){	            // Remove the smallest element from candidate pool	            min = pq.poll();	            k--;	            int i = min.row, j = min.col;	            // Add potential candidates	            if(i + 1 < row && !used[i+1][j]){	                pq.add(new MatrixElement(i+1,j,matrix[i+1][j]));	                used[i+1][j] = true;	            } 	            if(j + 1 < col && !used[i][j+1]) {	                pq.add(new MatrixElement(i,j+1,matrix[i][j+1]));	                used[i][j+1] = true;	            }	        }	        return min.val;	    }	}