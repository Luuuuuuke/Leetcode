import java.util.Comparator;import java.util.PriorityQueue;import java.util.Queue;public class KthSmallestInTwoSortedArray {	    /**	     * @param A an integer arrays sorted in ascending order	     * @param B an integer arrays sorted in ascending order	     * @param k an integer	     * @return an integer	     */	    public class Number{	        public int row;	        public int col;	        public int val;	        public Number(int row, int col, int val){	            this.col = col;	            this.row = row;	            this.val = val;	        }	    }	    	    public class ComparatorForNUmber implements Comparator<Number>{	        public int compare(Number n1, Number n2){	            return n1.val - n2.val;	        }	    }	    public int kthSmallestSum(int[] A, int[] B, int k) {	        	        int len1 = A.length, len2 = B.length;	        boolean[][] used = new boolean[len1][len2];	        Queue<Number> heap = new PriorityQueue<Number>(k, new ComparatorForNUmber());	        Number n = new Number(0,0,A[0] +B[0]);	        heap.add(n);	        used[0][0] = true;	        // O(k)	        while(k>0){	            n = heap.poll();	            k--;	            int i = n.row, j = n.col;	            // O(logk)	            if(i + 1 < len1 && !used[i+1][j]){	                heap.add(new Number(i+1,j,A[i+1] + B[j]));	                used[i+1][j] = true;	            }	            if(j + 1 < len2 && !used[i][j+1]){	                heap.add(new Number(i,j+1, A[i] + B[j+1]));	                used[i][j+1] = true;	            }	        }	        return n.val;	    }	}