import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.List;public class NumberOfConnectedComponent {	private class UnionFind{        HashMap<Integer, Integer> father;        UnionFind(ArrayList<UndirectedGraphNode> nodes){            father = new HashMap<Integer, Integer>();            for(UndirectedGraphNode each : nodes){                father.put(each.label, each.label);            }        }                public int find(int x){            int parent = father.get(x);            while(parent != father.get(parent)){                parent = father.get(parent);            }            // compress path            int next = x;            while(next != parent){                int tmp = father.get(next);                father.put(next, parent);                next = tmp;            }            return parent;        }                public void union(int x, int y){            int p1 = find(x);            int p2 = find(y);            if(p1 != p2) father.put(p1, p2);        }    }    /**     * @param nodes a array of Undirected graph node     * @return a connected set of a Undirected graph     */    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {        List<List<Integer>> res = new ArrayList<List<Integer>>();        UnionFind uf = new UnionFind(nodes);        // worst case O(n^2)        for(UndirectedGraphNode node : nodes){            for(UndirectedGraphNode neighbor : node.neighbors){                int p1 = uf.find(node.label);                int p2 = uf.find(neighbor.label);                if(p1 != p2) uf.union(p1,p2);            }        }        // print        HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();        for(UndirectedGraphNode node : nodes){            int parent = uf.find(node.label);            if(!map.containsKey(parent)){                map.put(parent, new ArrayList<Integer>());            }            List<Integer> list = map.get(parent);            list.add(node.label);            map.put(parent, list);        }        // sort each list        for(List<Integer> each : map.values()){            Collections.sort(each);            res.add(each);        }        return res;    }}// * Definition for Undirected graph. class UndirectedGraphNode {     int label;     ArrayList<UndirectedGraphNode> neighbors;    UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); } };