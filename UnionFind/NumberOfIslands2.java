import java.util.ArrayList;import java.util.HashMap;import java.util.List;public class NumberOfIslands2 {	private class Point{		int x;		int y;	}	    private class UnionFind{        HashMap<Integer, Integer> father;        UnionFind(int m, int n){            father = new HashMap<Integer, Integer>();            for(int i = 0; i < m; i++){                for(int j = 0; j < n; j++){                    int idx = convertIdx(i,j,n);                    father.put(idx, idx);                }            }        }                public int find(int x){            int parent = father.get(x);            while(parent != father.get(parent)){                parent = father.get(parent);            }            int next = x;            // Compress path            while(next != parent){                int tmp = father.get(next);                father.put(next, parent);                next = tmp;            }            return parent;        }                public void union(int x, int y){            int p1 = find(x);            int p2 = find(y);            if(p1 != p2) father.put(p2, p1);        }            }        /**     * @param n an integer     * @param m an integer     * @param operators an array of point     * @return an integer array     */    public List<Integer> numIslands2(int n, int m, Point[] operators) {        if(operators == null || operators.length == 0) return new ArrayList<Integer>();        int count = 0, len = operators.length;        List<Integer> ans = new ArrayList<Integer>();        int[][] grid = new int[n][m];        UnionFind uf = new UnionFind(n,m);        int[] dx = {0,-1,0,1};        int[] dy = {-1,0,1,0};        for(int i = 0; i < len; i++){            int x = operators[i].x;            int y = operators[i].y;            int idx = convertIdx(x,y,m);            if(grid[x][y] == 0){                grid[x][y] = 1;                count++;                for(int d = 0; d < 4; d++){                    int nx = x + dx[d];                    int ny = y + dy[d];                    int nidx = convertIdx(nx,ny,m);                    if(nx >= 0 && nx < n && ny >= 0 && ny < m && grid[nx][ny]==1){                        int p1 = uf.find(idx);                        int p2 = uf.find(nidx);                        if(p1 != p2){                            uf.union(idx, nidx);                            count--;                        }                    }                }            }            ans.add(count);        }        return ans;    }        private int convertIdx(int x, int y, int col){        return x*col+y;    }}