public class LinkedListPalindrom {	private class ListNode{		ListNode next;		int val;	}	public boolean isPalindrome(ListNode head) {                if(head == null || head.next == null) return true;        //find mid node        ListNode slow = head, fast = head, mid;        while(fast.next != null && fast.next.next != null){            slow = slow.next;            fast = fast.next.next;        }                // reverse second half        ListNode second = reverse(slow.next);        // compare        while(head != null && second != null){            if(head.val != second.val) return false;            head = head.next;            second = second.next;        }        return true;    }        //reverse    public ListNode reverse(ListNode head){        ListNode cur = head.next;        ListNode pre = head;        while(cur != null){            ListNode tmp = cur.next;            cur.next = pre;            pre = cur;            cur = tmp;        }        head.next = null;        head = pre;        return head;    }}