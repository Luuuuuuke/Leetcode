import java.util.HashMap;public class LongestSubarrayWithKDistinct {	 public int lengthOfLongestSubstringKDistinct(String s, int k) {	        if(k == 0 || k > s.length()) return 0;	        HashMap<Character, Integer> map = new HashMap<Character, Integer>();	        int left = 0, right = 0, max = 0, len = 0;	        for(; right < s.length(); right++){	            if(map.containsKey(s.charAt(right))){	                map.put(s.charAt(right), map.get(s.charAt(right)) + 1);	                len++;	            } else {	                if(map.size() < k){	                    map.put(s.charAt(right), 1);	                    len++;	                } else {	                    max = Math.max(max, len);	                    while(map.size() >= k && left <= right){	                        if(map.containsKey(s.charAt(left)) && map.get(s.charAt(left)) == 1){	                            map.remove(s.charAt(left));	                        }	                        else {	                            map.put(s.charAt(left), map.get(s.charAt(left)) - 1);	                        }	                        len--;	                        left++;	                    }	                    map.put(s.charAt(right), 1);	                    len++;	                }	            }	        }	        return Math.max(max, len);	    }}