public class NutsBoltsProblem {		/**     * @param nuts: an array of integers     * @param bolts: an array of integers     * @param compare: a instance of Comparator     * @return: nothing     */    public void sortNutsAndBolts(String[] nuts, String[] bolts, NBComparator compare) {        if(nuts.length == 0 || bolts.length == 0 || bolts.length != nuts.length) return;        matchPair(nuts, bolts, 0, bolts.length - 1, compare);    }        public void matchPair(String[] nuts, String[] bolts,int left, int right, NBComparator compare){        if(left >= right) return;        int pivot = partition(nuts, left, right, bolts[right], compare);        partition(bolts, left, right, nuts[pivot], compare);        matchPair(nuts, bolts, left, pivot - 1, compare);        matchPair(nuts, bolts, pivot + 1, right, compare);    }        // make the nuts array into 2 partition based on the pivot    // return the final pivot index    public int partition(String[] arr, int left, int right, String pivot, NBComparator compare){        int l = left, r = right, low = left;        for(; l < r; l++){            if(compare.cmp(arr[l], pivot) == -1 ||                compare.cmp(pivot , arr[l]) == 1){                String tmp = arr[low];                arr[low] = arr[l];                arr[l] = tmp;                low++;            }            else if(compare.cmp(arr[l], pivot) == 0){                String tmp = arr[r];                arr[r] = arr[l];                arr[l] = tmp;                l--;            }        }        String tmp = arr[r];        arr[r] = arr[low];        arr[low] = tmp;        return low;    }}