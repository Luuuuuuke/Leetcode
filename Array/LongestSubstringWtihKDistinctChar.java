import java.util.HashMap;public class LongestSubstringWtihKDistinctChar {	public int lengthOfLongestSubstringKDistinct(String s, int k) {        if(s == null || s.length() == 0){            return 0;        }        HashMap<Character, Integer> map = new HashMap<Character, Integer>();        int left = 0, right = 0;        int maxLen = 0;        while(right < s.length()){            char ch = s.charAt(right);            if(map.containsKey(ch)){                map.put(ch, map.get(ch) + 1);                maxLen = Math.max(maxLen, right - left + 1);            } else {                map.put(ch, 1);                if(map.size() > k){                    while(map.size() != k){                        char tmp = s.charAt(left);                        map.put(tmp, map.get(tmp) - 1);                        if(map.get(tmp) == 0){                            map.remove(tmp);                        }                        left++;                    }                }                maxLen = Math.max(maxLen, right - left + 1);            }            right++;        }        return maxLen;    }}