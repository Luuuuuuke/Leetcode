public class MaximalSquare {	/**     * @param matrix: a matrix of 0 and 1     * @return: an integer     */     // DP O(mn) time, O(m) space    public int maxSquare(int[][] matrix) {        if(matrix.length == 0 || matrix[0].length == 0) return 0;        int row = matrix.length, col = matrix[0].length;        // each cell of M represent the max length of         // the square that ends with i,j        int[][] M = new int[2][col];        int max = 0;        for(int i = 0; i < row; i++){            for(int j = 0; j < col; j++){                M[i%2][j] = matrix[i][j] == 1 ? 1 : 0;                if(matrix[i][j] == 1){                    if(i - 1 >= 0 && j - 1 >= 0){                        M[i%2][j] = Math.min(M[(i-1)%2][j-1], Math.min(M[(i-1)%2][j], M[i%2][j-1])) + 1;                    }                }                max = Math.max(max, M[i%2][j]);            }        }        return max*max;    }}