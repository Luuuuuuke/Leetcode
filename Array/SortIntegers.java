public class SortIntegers {	/**     * @param A an integer array     * @return void     */    public void sortIntegers2(int[] A) {        if(A == null || A.length == 0) return;        // mergeSort(A, 0 , A.length - 1);        quickSort(A, 0, A.length - 1);    }        public void quickSort(int[] nums, int left, int right){        if(left >= right) return;        int pivot = nums[left];        int lo = left, hi = right;        while(lo < hi){            while(lo < hi && nums[hi] > pivot){                hi--;            }            nums[lo] = nums[hi];            while(lo < hi && nums[lo] <= pivot){                lo++;            }            nums[hi] = nums[lo];        }        nums[lo] = pivot;        quickSort(nums, left, lo - 1);        quickSort(nums, lo + 1, right);    }        // public void mergeSort(int[] A, int left, int right){    //     if(left < right) {    //         int mid = left + (right - left) / 2;    //         mergeSort(A, left, mid);    //         mergeSort(A, mid + 1, right);    //         merge(A, left, mid, right);    //     }            // }        // public void merge(int[] A, int left, int mid, int right){    //     int[] temp = new int[right - left + 1];    //     int i = left, j = mid + 1, idx = 0;    //     while(i <= mid || j <= right){    //         if(j > right || (i <= mid && A[i] <= A[j])){    //             temp[idx] = A[i];    //             i++;    //         } else {    //             temp[idx] = A[j];    //             j++;    //         }    //         idx++;    //     }    //     idx = 0;    //     for(int k = left; k <= right; k++){    //         A[k] = temp[idx];    //         idx++;    //     }    // }}