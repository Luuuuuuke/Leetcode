public class Median {	/**     * @param nums: A list of integers.     * @return: An integer denotes the middle number of the array.     */    public int median(int[] nums) {        // quick sort        if(nums == null || nums.length == 0) return -1;        return find(nums, 0, nums.length - 1, (nums.length - 1) / 2);    }        public int find(int[] nums, int start, int end, int target){        if(start >= end) return nums[start];        int index = partition(nums, start, end);        if(index == target){            return nums[index];        }        else if(index > target){            return find(nums, start, index, target);        } else {            return find(nums, index + 1, end, target);        }    }            private int partition(int[] nums, int start, int end){        int l = start, h = end;        int pivot = nums[l];        while(l < h){            while(l < h && nums[h] >= pivot){                h--;            }            nums[l] = nums[h];            while(l < h && nums[l] < pivot){                l++;            }            nums[h] = nums[l];        }        nums[l] = pivot;        return l;    }}