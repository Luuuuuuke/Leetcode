public class BestTimeStock3 {	/**     * @param prices: Given an integer array     * @return: Maximum profit     */    public int maxProfit(int[] prices) {        if(prices == null || prices.length == 0){            return 0;        }        // obtain transaction before i th day and transaction after i th day        // then get max (before[i] + after[i])        int len = prices.length;        // the max profit for the first transaction before i th day        int min = prices[0], profit = 0;        int[] before = new int[len];        before[0] = 0;        for(int i = 1; i < len; i++){            profit = Math.max(profit, prices[i] - min);            min = Math.min(prices[i], min);            before[i] = profit;        }                // the max profit for the second transaction after i the day        int max = prices[len-1];        int[] after = new int[len];        profit = 0;        for(int i = len - 2; i >= 0; i--){            profit = Math.max(profit, max - prices[i]);            max = Math.max(max, prices[i]);            after[i] = profit;        }                // combine the profit for the i th day        int maxProfit = 0;        for(int i = 0; i < len; i++){            maxProfit = Math.max(maxProfit, before[i] + after[i]);        }        return maxProfit;    }}