import java.util.*;public class ConvertBinarySearchTreeToDoublyLinkedList {	public class TreeNode {	      public int val;	      public TreeNode left, right;	      public TreeNode(int val) {	          this.val = val;	          this.left = this.right = null;	      }	  }	  public class DoublyListNode {	      int val;	      DoublyListNode next, prev;	      DoublyListNode(int val) {	          this.val = val;	          this.next = this.prev = null;	      }	  }	/**     * @param root: The root of tree     * @return: the head of doubly list node     */    public DoublyListNode bstToDoublyList(TreeNode root) {      	        if(root == null){            return null;        }        DoublyListNode dummy = new DoublyListNode(0);        DoublyListNode cur = dummy;        Deque<TreeNode> stack = new ArrayDeque<TreeNode>();        TreeNode nd = root;        while(nd != null || !stack.isEmpty()){            while(nd != null){                stack.push(nd);                nd = nd.left;            }            nd = stack.pop();            DoublyListNode tmp = new DoublyListNode(nd.val);            cur.next = tmp;            tmp.prev = cur;            cur = cur.next;            nd = nd.right;        }        return dummy.next;    }}