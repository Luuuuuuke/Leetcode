public class SortLinkedList {	private class ListNode{		int val;		ListNode next;		public ListNode(int val){			this.val = val;			next = null;		}	}	public ListNode sortList(ListNode head) {        if(head == null || head.next == null) return head;        //find mid        ListNode slow = head, fast = head;        while(fast.next != null && fast.next.next != null){            slow = slow.next;            fast = fast.next.next;        }        // sort left, right respectively        ListNode right = sortList(slow.next);        slow.next = null;        ListNode left = sortList(head);        // merge        head = merge(left,right);        return head;    }        public ListNode merge(ListNode left, ListNode right){        ListNode dummy = new ListNode(0);        ListNode cur = dummy, cur1 = left, cur2 = right;        while(cur1 != null && cur2 != null){            if(cur1.val <= cur2.val){                cur.next = cur1;                cur1 = cur1.next;            } else {                cur.next = cur2;                cur2 = cur2.next;            }            cur = cur.next;        }        if(cur1 != null) cur.next = cur1;        if(cur2 != null) cur.next = cur2;        return dummy.next;    }}