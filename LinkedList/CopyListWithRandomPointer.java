public class CopyListWithRandomPointer {	  class RandomListNode {		      int label;		      RandomListNode next, random;		      RandomListNode(int x) { this.label = x; }		  };	/**     * @param head: The head of linked list with a random pointer.     * @return: A new head of a deep copy of the list.     */    public RandomListNode copyRandomList(RandomListNode head) {        if(head == null) return head;        // double the list        doubleSize(head);        // connect random        RandomListNode cur = head;        while(cur != null){            if(cur.random != null){                cur.next.random = cur.random.next;            }            cur = cur.next.next;        }        // split        RandomListNode newHead = head.next;        cur = head;        while(cur != null){            RandomListNode tmp = cur.next;            cur.next = tmp.next;            cur = cur.next;            if(tmp.next != null){                tmp.next = tmp.next.next;            }        }                return newHead;            }        private void doubleSize(RandomListNode head){        if(head == null) return;        RandomListNode cur = head;        while(cur != null){            RandomListNode tmp = cur.next;            RandomListNode newNode = new RandomListNode(cur.label);            newNode.next = tmp;            cur.next = newNode;            cur = tmp;        }    }}