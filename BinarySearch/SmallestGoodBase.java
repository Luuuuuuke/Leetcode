import java.math.*;public class SmallestGoodBase {	public String smallestGoodBase(String n) {        BigInteger N = new BigInteger(n);        long base = Long.MAX_VALUE;        for(int k = 2; k < 66; k++){            long left = 2, right = Long.MAX_VALUE;            while(left + 1 < right){                long mid = left + (right - left) / 2;                BigInteger v1 = N.multiply(BigInteger.valueOf(mid).subtract(BigInteger.ONE));                BigInteger v2 = BigInteger.valueOf(mid).pow(k).subtract(BigInteger.ONE);                int cmp = v1.compareTo(v2);                if(cmp == 0){                    base = Math.min(base, mid);                    break;                } else if(cmp > 0){                    left = mid;                } else {                    right = mid;                }            }            BigInteger v1 = N.multiply(BigInteger.valueOf(left).subtract(BigInteger.ONE));            BigInteger v2 = BigInteger.valueOf(left).pow(k).subtract(BigInteger.ONE);            BigInteger v3 = N.multiply(BigInteger.valueOf(right).subtract(BigInteger.ONE));            BigInteger v4 = BigInteger.valueOf(right).pow(k).subtract(BigInteger.ONE);            if(v1.compareTo(v2) == 0){                base = Math.min(base, left);            } else if(v3.compareTo(v4) == 0){                base = Math.min(base, right);            }        }        return base + "";    }}