public class SearchInRotatedArray {	/**      *@param A : an integer rotated sorted array     *@param target :  an integer to be searched     *return : an integer     */    public int search(int[] A, int target) {        if(A == null || A.length == 0) return -1;        int pivot = findPivot(A, 0, A.length - 1);        return find(A, target, 0, A.length - 1, pivot);    }        public int findPivot(int[] nums, int left, int right){        if(left > right) return -1;        int mid = left + (right - left) / 2;        if(mid == 0 || nums[mid-1] > nums[mid]){            return mid;        } else if (nums[mid] < nums[nums.length - 1]){            return findPivot(nums, left, mid - 1);        } else {            return findPivot(nums, mid + 1, right);        }    }        public int find(int[] nums, int target, int left, int right, int pivot){        if(pivot == -1 || left > right) return -1;        int mid = left + (right - left) / 2;        int realMid = (mid + pivot) % nums.length;        if(nums[realMid] == target) {            return realMid;        } else if (nums[realMid] < target){            return find(nums, target, mid + 1, right, pivot);        } else {            return find(nums, target, left, mid - 1, pivot);        }    }}