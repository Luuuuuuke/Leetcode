public class ConstructBinaryTree1 {	public class TreeNode {		      public int val;		      public TreeNode left, right;		      public TreeNode(int val) {		          this.val = val;		          this.left = this.right = null;		      }		  }	/**     *@param preorder : A list of integers that preorder traversal of a tree     *@param inorder : A list of integers that inorder traversal of a tree     *@return : Root of a tree     */    public TreeNode buildTree(int[] preorder, int[] inorder) {        if(preorder == null || inorder == null || preorder.length != inorder.length){            return null;        }        return buildTree(preorder, inorder, 0, inorder.length - 1, 0, preorder.length - 1);    }        public TreeNode buildTree(int [] preorder, int[] inorder, int instart, int inend, int prestart, int preend){        if(instart > inend) return null;        TreeNode root = new TreeNode(preorder[prestart]);        int pos = findPos(inorder, instart, inend, preorder[prestart]);        root.left = buildTree(preorder, inorder, instart, pos-1, prestart + 1, prestart + pos - instart);        root.right = buildTree(preorder, inorder, pos + 1, inend, prestart + pos - instart + 1, preend);        return root;    }        public int findPos(int[] inorder, int instart, int inend, int target){        for(int i = instart; i <= inend; i++){            if(inorder[i] == target) return i;        }        return -1;    }}