public class SearchForRange {	/**      *@param A : an integer sorted array     *@param target :  an integer to be inserted     *return : a list of length 2, [index1, index2]     */    public int[] searchRange(int[] A, int target) {        int[] res = new int[2];        if(A == null || A.length == 0){            res[0] = -1;            res[1] = -1;            return res;        }        res[0] = findLeft(A, target, 0, A.length - 1);        res[1] = findRight(A, target, 0, A.length - 1);        return res;    }        public int findLeft(int[] nums, int target, int left, int right){        if(left > right) return -1;        int mid = left + (right - left) / 2;        if(nums[mid] == target){            if(mid == 0 || nums[mid] > nums[mid - 1]) return mid;            else return findLeft(nums, target, left, mid - 1);        } else if(nums[mid] < target){            return findLeft(nums, target, mid + 1, right);        } else {            return findLeft(nums, target, left, mid - 1);        }    }        public int findRight(int[] nums, int target, int left, int right){        if(left > right) return -1;        int mid = left + (right - left) / 2;        if(nums[mid] == target){            if(mid == nums.length - 1 || nums[mid] < nums[mid + 1]) return mid;            else return findRight(nums, target, mid + 1, right);        } else if(nums[mid] < target){            return findRight(nums, target, mid + 1, right);        } else {            return findRight(nums, target, left, mid - 1);        }    }}