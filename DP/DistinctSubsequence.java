public class DistinctSubsequence {	/**     * @param S, T: Two string.     * @return: Count the number of distinct subsequences     */    public int numDistinct(String S, String T) {        if(T == null || S == null || S.length() < T.length()){            return 0;        }                int len1 = S.length(), len2 = T.length();        // dp[i][j] means how many T with first j are in S with first i        int[][] dp = new int[len1+1][len2+1];        dp[0][0] = 1;        // when j = 0, subsequence found        for(int i = 1; i <= len1; i++){            dp[i][0] = 1;        }                // dp[i][j] has two situation 1. S[i - 1] == T[j - 1]  2. !=        // for ==, dp[i][j] = dp[i-1][j-1] + dp[i-1][j]        // for !=, dp[i][j] = dp[i-1][j]        for(int i = 1; i <= len1; i++){            for(int j = 1; j <= len2; j++){                if(S.charAt(i-1) == T.charAt(j-1)){                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];                } else {                    dp[i][j] = dp[i-1][j];                }            }        }        return dp[len1][len2];    }}