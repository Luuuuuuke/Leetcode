public class LongestCommonSubsequence {	/**     * @param A, B: Two strings.     * @return: The length of longest common subsequence of A and B.     */    public int longestCommonSubsequence(String A, String B) {        if(A == null || B == null || A.length() == 0 || B.length() == 0){            return 0;        }                int len1 = A.length(), len2 = B.length();        // dp[i][j] stands for the length of the LCS for the first i elements in A        // and the first j elements in B        int[][] dp = new int[len1+1][len2+1];        // initialize        for(int i = 0; i <= len1; i++){            dp[i][0] = 0;        }        for(int i = 0; i <= len2; i++){            dp[0][i] = 0;        }                // if A[i-1] == B[j-1], there are 2 options, choose the max from them        // a.  add the current char to subsequence; b. ignore it  compare ...        // else max(dp[i-1][j], dp[i][j-1])        for(int i = 1; i <= len1; i++){            for(int j = 1; j <= len2; j++){                if(A.charAt(i-1) == B.charAt(j-1)){                    int max = Math.max(dp[i-1][j], dp[i][j-1]);                    dp[i][j] = Math.max(1 + dp[i-1][j-1], max);                } else {                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);                }            }        }        return dp[len1][len2];    }}