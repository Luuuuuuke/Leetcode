public class LongestPalindromicSubstring {	/**     * @param s input string     * @return the longest palindromic substring     */     // DP solution, O(n^2)    public String longestPalindrome(String s) {        if(s == null || s.length() <= 1) return s;        int len = s.length();        // dp[i][j] means if a string indexed from i to j is a palindrom        boolean[][] dp = new boolean[len][len];         int maxLen = 1, maxLeft = 0, maxRight = 0;        // initialize dp        for(int i = 0; i < len; i++){            for(int j = 0; j < len; j++){                if(i >= j) dp[i][j] = true;                else dp[i][j] = false;            }        }        // from len = 1 to len        for(int k = 1; k <= len; k++){            for(int i = 0; i < len; i++){                int j = i + k;                if(j >= s.length()) break;                if(s.charAt(i) != s.charAt(j)) dp[i][j] = false;                else{                    dp[i][j] = dp[i+1][j-1];                    if(dp[i][j] && k + 1 > maxLen){                        maxLen = k + 1;                        maxLeft = i;                        maxRight = j;                    }                }            }                }        return s.substring(maxLeft, maxRight + 1);    }}