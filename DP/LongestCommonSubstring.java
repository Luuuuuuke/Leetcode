public class LongestCommonSubstring {	/**     * @param A, B: Two string.     * @return: the length of the longest common substring.     */    public int longestCommonSubstring(String A, String B) {        // brute force O(n^3) , so optimize it        // DP        if(A == null || B == null || A.length() == 0 || B.length() == 0){            return 0;        }        int len1 = A.length(), len2 = B.length();        // dp[i][j] means the length of longest subarray ends  with i th element in A        // and jth element in B        int[][] dp = new int[len1+1][len2+1];        // initialize        for(int i = 0; i < len1; i++){            dp[i][0] = 0;        }        for(int i = 0; i < len2; i++){            dp[0][i] = 0;        }        // for dp[i][j], there are two situation        // 1. A[i-1] == B[j-1], dp[i][j] = max(1 + dp[i-1][j-1], max(dp[i][j-1], dp[i-1][j]))        // 2. A[i-1] != B[j-1], dp[i][j] = 0        int max = 0;        for(int i = 1; i <= len1; i++){            for(int j = 1; j <= len2; j++){                if(A.charAt(i-1) == B.charAt(j-1)){                    dp[i][j] = 1 + dp[i-1][j-1];                    max = Math.max(max, dp[i][j]);                } else {                    dp[i][j] = 0;                }            }        }        return max;    }}