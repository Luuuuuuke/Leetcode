public class DropEgg2 {	/**     * @param m the number of eggs     * @param n the umber of floors     * @return the number of drops in the worst case     */    public int dropEggs2(int m, int n) {        if(n == 0){            return 0;        }        if(m == 0){            return Integer.MAX_VALUE;        }        // dp[i][j] stands for minimum # of attempts to find the floor in worst case        // with i eggs and j floors        int[][] dp = new int[m+1][n+1];        dp[1][1] = 1;        // initialize        // for 1 eggs, attempts = # of floors        for(int i = 1; i <= n; i++){            dp[1][i] = i;        }        // for 0 floor, 0 attemps is needed        for(int i = 1; i <= m; i++){            dp[i][0] = 0;        }        // if i >= j, dp[i][j] = dp[i-1][j]        // else dp[i][j] = 1 + min(max(dp[i-1][k-1], dp[i][j-k+1]))        // where 1<=k<=j        for(int i = 2; i <= m; i++){            for(int j = 1; j <= n; j++){                if(i >= j){                    dp[i][j] = dp[i-1][j];                }                else {                    dp[i][j] = j;                    for(int k = 1; k <= j; k++){                        int attempts = 1 + Math.max(dp[i-1][k-1], dp[i][j-k]);                        dp[i][j] = Math.min(dp[i][j], attempts);                    }                }            }        }        return dp[m][n];    }}