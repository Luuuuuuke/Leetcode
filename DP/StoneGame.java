public class StoneGame {	/**     * @param A an integer array     * @return an integer     */    public int stoneGame(int[] A) {        if(A == null || A.length == 0){            return 0;        }         int len = A.length;        // dp[i][j] denotes the min cost to merge from i to j        int[][] dp = new int[len][len];        int[][] sum = new int[len][len];        for(int i = 0; i < len; i++){            for(int j = i; j < len; j++){                if(i == j){                    sum[i][j] = A[i];                    dp[i][j] = 0;                } else {                    sum[i][j] = sum[i][j - 1] + A[j];                    dp[i][j] = Integer.MAX_VALUE;                }            }        }        search(0, len - 1, dp, sum);        return dp[0][len - 1];    }        private void search(int start, int end, int[][] dp, int[][] sum){        if(dp[start][end] != Integer.MAX_VALUE){            return;        }        for(int i = start; i < end; i++){            search(start, i, dp, sum);            search(i + 1, end, dp, sum);            dp[start][end] = Math.min(dp[start][end], dp[start][i] + dp[i + 1][end] + sum[start][end]);        }    }}