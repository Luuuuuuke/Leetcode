public class CoinsInLine2 {	/**	 * @param values: an array of integers	 * @return: a boolean which equals to true if the first player will win	 */	 public boolean firstWillWin(int[] values) {	    // val[i] means the values first can get when only i coins left	    int[] val = new int[values.length + 1];	    boolean[] visited = new boolean[values.length + 1];	    // calculate the total amount of value	    int sum = 0;	    for(int i = 0; i < values.length; i++){	        sum += values[i];	    }	    val[val.length-1] = helper(values, val, visited, val.length - 1);	    return val[val.length - 1] > sum/2;	 }	 	 public int helper(int[] values, int[] val, boolean[] visited, int n){	     if(visited[n]) return val[n];	     int len = values.length;	     if(n == 0){	         val[n] = 0;	     } else if (n == 1){	         val[n] = values[len - n];	     } else if (n == 2 || n == 3){	         val[n] = values[len - n] + values[len - n + 1];	     } else{	         val[n] = Math.max(Math.min(helper(values, val, visited, n - 2), helper(values, val, visited, n - 3)) + values[len - n], Math.min(helper(values, val, visited, n - 3), helper(values, val, visited, n - 4)) + values[len - n] + values[len - n + 1]);	     }	     visited[n] = true;	     return val[n];	 }}