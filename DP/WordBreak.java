import java.util.Set;public class WordBreak {	/**     * @param s: A string s     * @param dict: A dictionary of words dict     */    public boolean wordBreak(String s, Set<String> dict) {        if(s == null || s.length() == 0) {            return true;        }         int len = s.length();        int maxLen = findMaxLen(dict);        // dp[i] means whether first i char in s can break into words        boolean[] dp = new boolean[len+1];        dp[0] = true;        for(int i = 1; i <= len; i++){            for(int j = i; j >= 1; j--){                // !! if the length of word exceed the maxLen, no need to find no more                if(i - j + 1 > maxLen) break;                String tmp = s.substring(j-1, i);                if(dict.contains(tmp)){                    dp[i] = dp[j-1];                }                if(dp[i]) break;            }        }        return dp[len];    }        // !! if the length of word exceed the maxLen, no need to find no more    // solved TLE    private int findMaxLen(Set<String> dict){        int maxLen = 0;        for(String str : dict){            maxLen = Math.max(maxLen, str.length());        }        return maxLen;    }}