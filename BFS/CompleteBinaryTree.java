import java.util.LinkedList;import java.util.Queue;public class CompleteBinaryTree {	public class TreeNode {		      public int val;		      public TreeNode left, right;		      public TreeNode(int val) {		          this.val = val;		          this.left = this.right = null;		      }		  }	/**     * @param root, the root of binary tree.     * @return true if it is a complete binary tree, or false.     */    public boolean isComplete(TreeNode root) {        // BFS level order traversal        // 1. if find a node is not full node,         //   then the following nodes should not have any child nodes.        // 2. A node has no left node should not have right node either.        if(root == null) return true;        boolean flag = false;        Queue<TreeNode> q = new LinkedList<TreeNode>();        q.offer(root);        while(!q.isEmpty()){            TreeNode cur = q.poll();            if(cur.right != null && cur.left == null) return false;            if(!flag){                if(cur.left != null){                    q.offer(cur.left);                }                if(cur.right != null){                    q.offer(cur.right);                }            } else {                if(cur.left != null || cur.right != null) return false;            }            if(cur.left == null || cur.right == null) flag = true;        }        return true;    }}