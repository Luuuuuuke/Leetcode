import java.util.*;public class NumberOfConnectedGraph {	class UndirectedGraphNode {		      int label;		      ArrayList<UndirectedGraphNode> neighbors;		      UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }		  };	/**     * @param nodes a array of Undirected graph node     * @return a connected set of a Undirected graph     */    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {        List<List<Integer>> res = new ArrayList<List<Integer>>();        if(nodes == null || nodes.size() == 0){            return res;        }        HashSet<Integer> set = new HashSet<Integer>();        for(UndirectedGraphNode nd : nodes){            if(set.contains(nd.label)) continue;            bfs(res, nd, set);        }        return res;    }            public void bfs(List<List<Integer>> res, UndirectedGraphNode node, HashSet<Integer> set){        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();        ArrayList<Integer> sol = new ArrayList<Integer>();        queue.offer(node);        set.add(node.label);        sol.add(node.label);        while(!queue.isEmpty()){            UndirectedGraphNode cur = queue.poll();            for(UndirectedGraphNode nd : cur.neighbors){                if(set.contains(nd.label)) continue;                set.add(nd.label);                queue.offer(nd);                sol.add(nd.label);            }        }        Collections.sort(sol);        res.add(sol);    }    }