import java.util.LinkedList;import java.util.Queue;public class BuildPostOffice2 {	private class Point{        int x, y;        Point(int x, int y){            this.x = x;            this.y = y;        }    }    /**     * @param grid a 2D grid     * @return an integer     */    public int shortestDistance(int[][] grid) {        // for each houses, do bfs, and sum the distance from each empty land to office        if(grid == null || grid.length == 0 || grid[0].length == 0){            return -1;        }        int row = grid.length, col = grid[0].length;        // dis[i][j] means the distance from land i,j to all houses        int[][] dis = new int[row][col];        int tag = 0;        int[] dx = {-1, 0, 1, 0};        int[] dy = {0, -1, 0, 1};        for(int i = 0; i < row; i++){            for(int j = 0; j < col; j++){                if(grid[i][j] == 1){                    // bfs                     Queue<Point> queue = new LinkedList<Point>();                    queue.offer(new Point(i, j));                    int len = 0;                    while(!queue.isEmpty()){                        int size = queue.size();                        for(int t = 0; t < size; t++){                            Point cur = queue.poll();                            int x = cur.x;                            int y = cur.y;                            if(grid[x][y] != 1){                                dis[x][y] += len;                            }                            for(int k = 0; k < 4; k++){                                int nx = x + dx[k];                                int ny = y + dy[k];                                if(nx >= 0 && nx < row && ny >= 0 && ny < col && grid[nx][ny] == tag){                                    queue.offer(new Point(nx, ny));                                    grid[nx][ny]--;                                }                            }                        }                        len++;                    }                    tag--;                }            }        }                int min = Integer.MAX_VALUE;        for(int i = 0; i < row; i++){            for(int j = 0; j < col; j++){                if(grid[i][j] == tag){                    min = Math.min(min, dis[i][j]);                }            }        }        if(min == Integer.MAX_VALUE){            return -1;        } else {            return min;        }    }}