public class ZombieInMatrix {	public class Node{        int x, y;        Node(int x, int y){            this.x = x;            this.y = y;        }    }    /**     * @param grid  a 2D integer grid     * @return an integer     */    public int zombie(int[][] grid) {        // idea: first, count people O(n^2)        // second, start from all zombie, do bfs, if turn 0 to 1, count--, and count days        // till end, if count == 0, return days, else return -1;        if(grid == null || grid.length == 0 || grid[0].length == 0){            return 0;        }        int row = grid.length, col = grid[0].length;        int count = 0;        int[] dx = {-1, 1, 0, 0};        int[] dy = {0, 0, -1, 1};        Queue<Node> queue = new LinkedList<Node>();        // first , count people         for(int i = 0; i < row; i++){            for(int j = 0; j < col; j++){                if(grid[i][j] == 0){                    count++;                } else if(grid[i][j] == 1){                    queue.offer(new Node(i, j));                }            }        }                if(count == 0) return 0;                // bfs        int days = 1;        while(!queue.isEmpty()){            int size = queue.size();            for(int i = 0; i < size; i++){                Node cur = queue.poll();                for(int d = 0; d < 4; d++){                    int nx = cur.x + dx[d];                    int ny = cur.y + dy[d];                    if(nx < 0 || nx >= row || ny < 0 || ny >= col || grid[nx][ny] != 0){                        continue;                    }                    grid[nx][ny] = 1;                    queue.offer(new Node(nx, ny));                    count--;                    if(count == 0){                        return days;                    }                }            }            days++;        }        return -1;    }}