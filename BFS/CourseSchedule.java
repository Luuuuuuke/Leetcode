import java.util.*;public class CourseSchedule {	/**     * @param numCourses a total of n courses     * @param prerequisites a list of prerequisite pairs     * @return the course order     */    public int[] findOrder(int numCourses, int[][] prerequisites) {        int[] res = new int[numCourses];        // bfs to topological sorting        HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();        for(int[] each : prerequisites){            int pre = each[1];            int next = each[0];            if(!map.containsKey(pre)){                map.put(pre, new ArrayList<Integer>());            }            map.get(pre).add(next);        }                // build indegree array        int[] indegree = new int[numCourses];        for(int i = 0; i < numCourses; i++){            if(!map.containsKey(i)) continue;            for(int each : map.get(i)){                indegree[each]++;            }        }                // initialize queue        Queue<Integer> queue = new LinkedList<Integer>();        for(int i = 0; i < numCourses; i++){            if(indegree[i] == 0){                queue.offer(i);            }        }                int count = 0;        // bfs        while(!queue.isEmpty()){            int cur = queue.poll();            if(map.get(cur) != null){                for(int each : map.get(cur)){                    indegree[each]--;                    if(indegree[each] == 0){                        queue.offer(each);                    }                }            }            res[count] = cur;            count++;        }        if(count == numCourses){            return res;        }        return new int[0];    }}