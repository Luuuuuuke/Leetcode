import java.util.*;public class SearchGraphNode {	class UndirectedGraphNode {		      int label;		      ArrayList<UndirectedGraphNode> neighbors;		      UndirectedGraphNode(int x) { 		          label = x; neighbors = new ArrayList<UndirectedGraphNode>(); 		      }		  };	/**     * @param graph a list of Undirected graph node     * @param values a hash mapping, <UndirectedGraphNode, (int)value>     * @param node an Undirected graph node     * @param target an integer     * @return the a node     */    public UndirectedGraphNode searchNode(ArrayList<UndirectedGraphNode> graph,                                          Map<UndirectedGraphNode, Integer> values,                                          UndirectedGraphNode node,                                          int target) {        // start from  node do bfs, until find target value        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();        HashSet<UndirectedGraphNode> visited = new HashSet<UndirectedGraphNode>();        queue.offer(node);        visited.add(node);        while(!queue.isEmpty()){            UndirectedGraphNode cur = queue.poll();            if(values.get(cur) == target){                return cur;            }            for(UndirectedGraphNode each : cur.neighbors){                if(!visited.contains(each)){                    queue.offer(each);                    visited.add(each);                }            }        }        return null;    }}