import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.Queue;public class CloneGraph {	class UndirectedGraphNode {		      int label;		      ArrayList<UndirectedGraphNode> neighbors;		      UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }		  };	/**     * @param node: A undirected graph node     * @return: A undirected graph node     */    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {        if(node == null) return null;        UndirectedGraphNode res = new UndirectedGraphNode(node.label);        HashMap<Integer, UndirectedGraphNode> map = new HashMap<Integer, UndirectedGraphNode>();        HashSet<Integer> visited = new HashSet<Integer>();        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();        queue.offer(node);        map.put(node.label, res);        visited.add(node.label);        while(!queue.isEmpty()){            UndirectedGraphNode cur = queue.poll();            UndirectedGraphNode copy;            if(map.containsKey(cur.label)){                copy = map.get(cur.label);            }else{                copy = new UndirectedGraphNode(cur.label);                map.put(cur.label, copy);            }            ArrayList<UndirectedGraphNode> list = new ArrayList<UndirectedGraphNode>();            for(UndirectedGraphNode each : cur.neighbors){                if(!visited.contains(each.label)){                    queue.offer(each);                    visited.add(each.label);                }                UndirectedGraphNode tmp;                if(map.containsKey(each.label)){                    tmp = map.get(each.label);                } else {                    tmp = new UndirectedGraphNode(each.label);                    map.put(each.label, tmp);                }                list.add(tmp);            }            copy.neighbors = list;        }        return res;    }}