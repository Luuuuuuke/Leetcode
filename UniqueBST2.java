import java.util.ArrayList;import java.util.List;public class UniqueBST2 {	private class TreeNode{		int val;		TreeNode left;		TreeNode right;		TreeNode(int x) {val = x;}	}	public List<TreeNode> generateTrees(int n) {        // DP solution        List<TreeNode>[] res = new List[n+1];        res[0] = new ArrayList<TreeNode>();        if(n == 0) return res[0];        res[0].add(null);         // For len = 1..n, build their tree list        for(int len = 1; len <= n; len++){            res[len] = new ArrayList<TreeNode>();            // pick root i from 0 to len-1            for(int rootIdx = 0; rootIdx < len; rootIdx++){                // for each left subtree                for(TreeNode nodeL : res[rootIdx]){                    // for each right subtree                    for(TreeNode nodeR : res[len - 1 - rootIdx]){                        TreeNode root = new TreeNode(rootIdx + 1);                        root.left = nodeL;                        root.right = clone(nodeR, rootIdx+1);                        res[len].add(root);                    }                }            }        }        return res[n];    }        // clone the left subtree with certain offset    public TreeNode clone(TreeNode node, int offset){        if(node == null) return null;        TreeNode root = new TreeNode(node.val + offset);        root.left = clone(node.left, offset);        root.right = clone(node.right, offset);        return root;    }}