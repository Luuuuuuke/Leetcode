import java.util.*;public class WordSquares {	public class TrieNode{        List<String> startWith;        HashMap<Character, TrieNode> childs;        TrieNode(){            startWith = new ArrayList<String>();            childs = new HashMap<Character, TrieNode>();        }    }        public class Trie{        TrieNode root;        Trie(String[] words){            root = new TrieNode();            for(String each : words){                TrieNode cur = root;                for(char ch : each.toCharArray()){                    if(!cur.childs.containsKey(ch)){                        cur.childs.put(ch, new TrieNode());                    }                    cur.startWith.add(each);                    cur = cur.childs.get(ch);                }            }        }                public List<String> getByPrefix(String prefix){            TrieNode cur = root;            List<String> res = new ArrayList<String>();            for(char ch : prefix.toCharArray()){                if(!cur.childs.containsKey(ch)){                    return res;                }                cur = cur.childs.get(ch);            }            return cur.startWith;        }    }    // build trie tree, do backtracking    public List<List<String>> wordSquares(String[] words) {        List<List<String>> res = new ArrayList<List<String>>();        if(words == null || words.length == 0){            return res;        }        int len = words[0].length();        Trie trie = new Trie(words);        ArrayList<String> sol = new ArrayList<String>();        for(String each : words){            sol.add(each);            dfs(res, sol, trie, len);            sol.remove(sol.size() - 1);        }        return res;    }        public void dfs(List<List<String>> res, ArrayList<String> sol, Trie trie, int len){        if(sol.size() == len){            res.add(new ArrayList<String>(sol));            return;        }        StringBuilder sb = new StringBuilder();        for(int i = 0; i < sol.size(); i++){            sb.append(sol.get(i).charAt(sol.size()));        }        List<String> candidates = trie.getByPrefix(sb.toString());        for(String each : candidates){            sol.add(each);            dfs(res, sol, trie, len);            sol.remove(sol.size() - 1);        }    }}