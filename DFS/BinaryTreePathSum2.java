import java.util.*;public class BinaryTreePathSum2 {	 public class TreeNode {		      public int val;		      public TreeNode left, right;		      public TreeNode(int val) {		          this.val = val;		          this.left = this.right = null;		      }		  }	/**     * @param root the root of binary tree     * @param target an integer     * @return all valid paths     */    public List<List<Integer>> binaryTreePathSum2(TreeNode root, int target) {        List<List<Integer>> res = new ArrayList<List<Integer>>();        if(root == null){            return res;        }        dfs(res, new ArrayList<Integer>(), root, target);        return res;    }        public void dfs(List<List<Integer>> res, ArrayList<Integer> visited, TreeNode root, int target){        if(root == null) return;        visited.add(root.val);        int sum = target;        for(int i = visited.size() - 1; i >= 0; i--){            sum -= visited.get(i);            if(sum == 0){                ArrayList<Integer> tmp = new ArrayList<Integer>();                for(int j = i; j <= visited.size() - 1; j++){                    tmp.add(visited.get(j));                }                res.add(tmp);            }        }        dfs(res, visited, root.left, target);        dfs(res, visited, root.right, target);        visited.remove(visited.size() - 1);    }}