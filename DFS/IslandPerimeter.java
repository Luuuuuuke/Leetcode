public class IslandPerimeter {	public int islandPerimeter(int[][] grid) {        // idea: find the first land, do dfs        // dfs rule: for each land, count the border that faces the water, add the total        // for those already visited, set value to 2        if(grid == null || grid.length == 0 || grid[0].length == 0){            return 0;        }        int row = grid.length, col = grid[0].length;        int res = 0;        for(int i = 0; i < row; i++){            for(int j = 0; j < col; j++){                if(grid[i][j] == 1){                    res = dfs(grid, i, j, row, col);                    break;                }            }        }        return res;    }        private int dfs(int[][] grid, int i, int j, int row, int col){        if(i < 0 || i >= row || j < 0 || j >= col || grid[i][j] != 1){            return 0;        }        int count = 0;        // count border that faces water        if(i == 0 || grid[i-1][j] == 0){            count++;        }        if(i == row - 1 || grid[i + 1][j] == 0){            count++;        }        if(j == 0 || grid[i][j-1] == 0){            count++;        }        if(j == col - 1 || grid[i][j + 1] == 0){            count++;        }        grid[i][j]++;        count += dfs(grid, i + 1, j, row, col);        count += dfs(grid, i - 1, j, row, col);        count += dfs(grid, i, j - 1, row, col);        count += dfs(grid, i, j + 1, row, col);        return count;    }}