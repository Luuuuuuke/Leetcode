import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Deque;import java.util.HashSet;public class TopologicalSorting {	private class DirectedGraphNode {		      int label;		      ArrayList<DirectedGraphNode> neighbors;		      DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }		  };	/**     * @param graph: A list of Directed graph node     * @return: Any topological order for the given graph.     */        public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {        // dfs         ArrayList<DirectedGraphNode> res = new ArrayList<DirectedGraphNode>();        if(graph == null || graph.size() == 0){            return res;        }        HashSet<Integer> visited = new HashSet<Integer>();        Deque<DirectedGraphNode> stack = new ArrayDeque<DirectedGraphNode>();        for(DirectedGraphNode nd : graph){            if(!visited.contains(nd.label)){                dfs(visited, stack, nd);            }        }        // print        while(!stack.isEmpty()){            res.add(stack.pop());        }        return res;    }        public void dfs(HashSet<Integer> visited, Deque<DirectedGraphNode> stack, DirectedGraphNode nd){        ArrayList<DirectedGraphNode> neighbors = nd.neighbors;        visited.add(nd.label);        for(DirectedGraphNode each : neighbors){            if(!visited.contains(each.label)){                dfs(visited, stack, each);            }        }        stack.push(nd);    }}