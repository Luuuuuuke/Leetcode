import java.util.ArrayList;import java.util.HashSet;import java.util.List;public class Permutation {	HashSet<Integer> used = new HashSet<Integer>();    public List<List<Integer>> permute(int[] nums) {        List<List<Integer>> res = new ArrayList<List<Integer>>();        if(nums == null || nums.length == 0){            return res;        }        dfs(nums, res, new ArrayList<Integer>());        return res;    }    private void dfs(int[] nums, List<List<Integer>> res, List<Integer> sol){        if(sol.size() == nums.length){            res.add(new ArrayList<Integer>(sol));            return;        }        for(int i = 0; i < nums.length; i++){            if(used.contains(nums[i])) continue;            sol.add(nums[i]);            used.add(nums[i]);            dfs(nums, res, sol);            sol.remove(sol.size() - 1);            used.remove(nums[i]);        }    }}