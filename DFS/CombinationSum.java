import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class CombinationSum {	/**     * @param candidates: A list of integers     * @param target:An integer     * @return: A list of lists of integers     */    public List<List<Integer>> combinationSum(int[] candidates, int target) {        List<List<Integer>> res = new ArrayList<List<Integer>>();        if(candidates == null || candidates.length == 0){            return res;        }        Arrays.sort(candidates);        dfs(res, new ArrayList<Integer>(), candidates, target, 0, 0);        return res;    }        private void dfs(List<List<Integer>> res, List<Integer> sol, int[] candidates, int target, int sum, int cur){                if(target == sum){            res.add(new ArrayList<Integer>(sol));            return;        }                for(int i = cur; i < candidates.length; i++){            if(i > 0 && candidates[i] == candidates[i-1]) continue;            if(sum + candidates[i] > target) return;            sol.add(candidates[i]);            dfs(res, sol, candidates, target, sum + candidates[i], i);            sol.remove(sol.size() - 1);        }    }}