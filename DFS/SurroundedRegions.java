import java.util.HashSet;public class SurroundedRegions {	private class Node{        int x, y;        Node(int x, int y){            this.x = x;             this.y = y;        }    }    /**     * @param board a 2D board containing 'X' and 'O'     * @return void     */    public void surroundedRegions(char[][] board) {        // from the outer border whose value is 0, do dfs        // add all connected 0s to set        // reset board to all X, and set only those in set to 0        if(board == null || board.length == 0 || board[0].length == 0){            return;        }        int row = board.length, col = board[0].length;        HashSet<Node> set = new HashSet<Node>();        // add 0s from 4 border to inital queue        for(int i = 0; i < row; i++){            for(int j = 0; j < col; j++){                if((i == 0 || j == 0 || i == row - 1 || j == col - 1) && board[i][j] == 'O'){                    dfs(i, j, board, set, row, col);                }            }        }        // reset board to all X        for(int i = 0; i < row; i++){            for(int j = 0; j < col; j++){                board[i][j] = 'X';            }        }        // set to 0 for those in set        for(Node nd : set){            board[nd.x][nd.y] = 'O';        }        return;    }        private void dfs(int x, int y, char[][] board, HashSet<Node> set, int row ,int col){        if(x < 0 || x >= row || y < 0 || y >= col || board[x][y] == 'X') return;        board[x][y] = 'X';        set.add(new Node(x, y));        dfs(x + 1, y, board, set, row, col);        dfs(x - 1, y, board, set, row, col);        dfs(x, y - 1, board, set, row, col);        dfs(x, y + 1, board, set, row, col);    }}