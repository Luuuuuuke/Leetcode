public class LowestCommonAncestor3 {	public class TreeNode {		      public int val;		      public TreeNode left, right;		      public TreeNode(int val) {		          this.val = val;		          this.left = this.right = null;		      }		  }	private class ReturnType{        boolean a_exist, b_exist;        TreeNode node;        ReturnType(TreeNode nd, boolean a, boolean b){            this.a_exist = a;            this.b_exist = b;            this.node = nd;        }    }    /**     * @param root The root of the binary tree.     * @param A and B two nodes     * @return: Return the LCA of the two nodes.     */    public TreeNode lowestCommonAncestor3(TreeNode root, TreeNode A, TreeNode B) {        ReturnType rt = helper(root, A, B);        if(rt.node == null) return null;        else {            if(rt.a_exist && rt.b_exist){                return rt.node;            } else {                return null;            }        }            }        public ReturnType helper(TreeNode root, TreeNode A, TreeNode B){        if(root == null || A == null || B == null){            return new ReturnType(null, false, false);        }                ReturnType left = helper(root.left, A, B);        ReturnType right = helper(root.right, A, B);                boolean a_exist = left.a_exist || right.a_exist || root == A;        boolean b_exist = left.b_exist || right.b_exist || root == B;                if(root == A || root == B){            return new ReturnType(root, a_exist, b_exist);        }                if(left.node == null && right.node == null){            return new ReturnType(null, a_exist, b_exist);        }        if(left.node == null){            return new ReturnType(right.node, a_exist, b_exist);        }        if(right.node == null){            return new ReturnType(left.node, a_exist, b_exist);        }        return new ReturnType(root, a_exist, b_exist);            }}