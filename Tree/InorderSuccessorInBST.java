public class InorderSuccessorInBST {	public class TreeNode {		      int val;		      TreeNode left;		      TreeNode right;		      TreeNode(int x) { val = x; }		  }	public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {        // Interation O(n) solution        // boolean flag = false;        // TreeNode cur = root;        // Deque<TreeNode> stack = new ArrayDeque<TreeNode>();        // while(cur != null || !stack.isEmpty()){        //     while(cur != null){        //         stack.push(cur);        //         cur = cur.left;        //     }        //     cur = stack.pop();        //     if(flag) return cur;        //     if(cur == p) flag = true;        //     cur = cur.right;        // }        // return null;                // O(h) solution, used BST property        if(root == null || p == null) return null;        TreeNode prev = null;        TreeNode cur = root;        while(cur != null && cur.val != p.val){            if(p.val < cur.val){                prev = cur;                cur = cur.left;            } else {                cur = cur.right;            }        }        if(cur == null) return null;        if(cur.right != null) {            cur = cur.right;            while(cur.left != null){                cur = cur.left;            }            return cur;        }        else{            return prev;        }    }}