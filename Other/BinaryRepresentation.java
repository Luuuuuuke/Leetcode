public class BinaryRepresentation {	/**     *@param n: Given a decimal number that is passed in as a string     *@return: A string     */    public String binaryRepresentation(String n) {        // split        String whole = "";        String fraction = "";        if(!n.contains(".")){            whole = n;        } else {            String[] nums = n.split("\\.");            whole = nums[0];            fraction = nums[1];        }                // transform whole part        String whole_str = transformWhole(whole);        // transform fraction part        String fraction_str = transformFraction(fraction);        // combine        if(fraction == "" || fraction.equals("0")){            return whole_str;        } else if(fraction_str.equals("ERROR")){            return "ERROR";        }        return whole_str + "." + fraction_str;    }        private String transformWhole(String str){        int whole = Integer.valueOf(str);        StringBuilder sb = new StringBuilder();        while(whole != 0){            sb.insert(0, whole % 2);            whole /= 2;        }        if(sb.length() == 0) return "0";        return sb.toString();    }        private String transformFraction(String fraction){        String tmp = "0." + fraction;        double fra = Double.valueOf(tmp);        StringBuilder sb = new StringBuilder();        while(fra != 0){            if(sb.length() >= 32) return "ERROR";            fra = fra * 2;            if(fra >= 1){                sb.append("1");                fra -= 1;            } else {                sb.append("0");            }        }        return sb.toString();    }}