import java.util.*;public class MergeInterval {	 public class Interval {		      int start;		      int end;		      Interval() { start = 0; end = 0; }		      Interval(int s, int e) { start = s; end = e; }		  }	private class Node{        int x;        boolean isEnter;        Node(int x, boolean isEnter){            this.x = x;            this.isEnter = isEnter;        }    }    public List<Interval> merge(List<Interval> intervals) {        List<Interval> res = new ArrayList<Interval>();        if(intervals == null || intervals.size() == 0){            return res;        }        List<Node> nodes = new ArrayList<Node>();        for(Interval each : intervals){            nodes.add(new Node(each.start, true));            nodes.add(new Node(each.end, false));        }        Collections.sort(nodes, new Comparator<Node>(){            public int compare(Node n1, Node n2){                if(n1.x == n2.x){                    if(n1.isEnter && !n2.isEnter){                        return -1;                    } else if(!n1.isEnter && n2.isEnter){                        return 1;                    }                 }                return n1.x - n2.x;            }        });                int count = 1, start = nodes.get(0).x;        boolean isStart = false;        for(int i = 1; i < nodes.size(); i++){            if(isStart) {                start = nodes.get(i).x;                isStart = false;            }            if(nodes.get(i).isEnter){                count++;            } else {                count--;            }            if(count == 0){                res.add(new Interval(start, nodes.get(i).x));                isStart = true;            }        }        return res;    }}