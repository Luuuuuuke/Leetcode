import java.util.*;public class LargestNumber {	/**     *@param num: A list of non negative integers     *@return: A string     */    public String largestNumber(int[] nums) {        if(nums == null || nums.length == 0){            return "";        }        Integer[] newArray = new Integer[nums.length];        for(int i = 0; i < nums.length; i++){            newArray[i] = Integer.valueOf(nums[i]);        }        Arrays.sort(newArray, new NumberComparator());        StringBuilder sb = new StringBuilder();        for(int each : newArray){            sb.append(each);        }        if(sb.charAt(0) == '0'){            return "0";        }        return sb.toString();    }        public class NumberComparator implements Comparator<Integer>{        public int compare(Integer num1, Integer num2){            if(num1 == 0 || num2 == 0){                return num2 - num1;            }            Deque<Integer> stack1 = new ArrayDeque<Integer>();            Deque<Integer> stack2 = new ArrayDeque<Integer>();            // push each digit into stack            while(num1 != 0){                stack1.push(num1 % 10);                num1 /= 10;            }            while(num2 != 0){                stack2.push(num2 % 10);                num2 /= 10;            }            int cur1 = stack1.peek();            int cur2 = stack2.peek();            // compare from the highest digit            while(!stack1.isEmpty() && !stack2.isEmpty()){                cur1 = stack1.pop();                cur2 = stack2.pop();                if(cur1 != cur2){                    return cur2 - cur1;                }            }            if(!stack1.isEmpty()){                if(stack1.peek() >= cur1){                    return -1;                } else {                    return 1;                }            }             if(!stack2.isEmpty()){                if(stack2.peek() >= cur2){                    return 1;                } else {                    return -1;                }            }            return 0;        }    }}