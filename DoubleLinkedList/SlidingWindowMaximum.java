import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Deque;public class SlidingWindowMaximum {	/**     * @param nums: A list of integers.     * @return: The maximum number inside the window at each moving.     */    public ArrayList<Integer> maxSlidingWindow(int[] nums, int k) {        if(nums == null || nums.length == 0 || k == 0) return new ArrayList<Integer>();        Deque<Integer> queue = new ArrayDeque<Integer>();        ArrayList<Integer> res = new ArrayList<Integer>();        for(int i = 0; i < k -1; i++){            while(!queue.isEmpty() && queue.peekLast() < nums[i]){                queue.pollLast();            }            queue.addLast(nums[i]);        }        for(int i = k - 1; i < nums.length; i++){            while(!queue.isEmpty() && queue.peekLast() < nums[i]) queue.pollLast();            queue.addLast(nums[i]);            res.add(queue.peekFirst());            if(queue.peekFirst() == nums[i-k+1]) queue.pollFirst();        }        return res;    }}